#maxint=200.

% define available time units for GUI
available_time_unit(seconds).
available_time_unit(minutes).
available_time_unit(hours).
available_time_unit(days).
available_time_unit(weeks).
available_time_unit(months).

% zero is a possible start time for a task, also every end of a planned task is a possible start time
possible_start_time(0).
possible_start_time(Time) :- planned_task(_,_,Time).

% plan every task
planned_task(Name, Start, End) v -planned_task(Name, Start, End) :- task(Name,_,Duration), possible_start_time(Start), End = Start + Duration.

% each task must be planned
task_is_assigned(Name) :- task(Name,_,_), planned_task(Name,_,_).
:- task(Name,_,_), not task_is_assigned(Name).

% a task must not be assigned to more than one start time
:- task(Name,_,_), planned_task(Name,Start1,_), planned_task(Name,Start2,_), Start1 <> Start2.

% a task which depend on an other tasks must not start, before the other tasks is completed
:- depends_on(Task1,Task2), planned_task(Task1,Start,_), planned_task(Task2,_,End), End > Start.

% the planned project duration must not exceed the duration of the project
project_duration(Duration) :- #max{End : planned_task(_,_,End)} = Duration, #int(Duration).
:- project_duration(Duration), max_project_duration(MaxDuration), Duration > MaxDuration.

% time points during the project
time_point(X) :- project_duration(Duration), #int(X), X >= 0, X < Duration.

% the number of employees assigned to a task on a specific time point must not exceed the number of employees of the project
current_task(Time, Name) :- time_point(Time), planned_task(Name,Start,End), Start <= Time, End > Time.
current_employee_count(Time,Count) :- time_point(Time), #sum{EmployeeCount,Name : task(Name,EmployeeCount,_), current_task(Time,Name)} = Count, #int(Count).
:- current_employee_count(_,EmployeeCount), max_employee_count(MaxEmployeeCount), EmployeeCount > MaxEmployeeCount.

% calculate duration of full staff utilization throughout the project
full_utilization_duration(Duration) :- max_employee_count(MaxEmployeeCount), #count{T : current_employee_count(T,C), C = MaxEmployeeCount} = Duration, #int(Duration).
partial_utilization_duration(Duration) :- full_utilization_duration(FullUtilization), project_duration(ProjectDuration), Duration = ProjectDuration - FullUtilization.

% tag plan with bad_utilization, if the ful staff utilization duration is below 25% of the project duration
bad_utilization :- full_utilization_duration(FullUtilization), partial_utilization_duration(PartialUtilization), TempFullUtilization = FullUtilization * 3, TempFullUtilization < PartialUtilization.